// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// similarity_mat
arma::mat similarity_mat(arma::umat cluster_record);
RcppExport SEXP _BayesicGibbs_similarity_mat(SEXP cluster_recordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type cluster_record(cluster_recordSEXP);
    rcpp_result_gen = Rcpp::wrap(similarity_mat(cluster_record));
    return rcpp_result_gen;
END_RCPP
}
// entropy
double entropy(arma::vec class_weights);
RcppExport SEXP _BayesicGibbs_entropy(SEXP class_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type class_weights(class_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(entropy(class_weights));
    return rcpp_result_gen;
END_RCPP
}
// dirichlet_posterior
arma::vec dirichlet_posterior(arma::vec concentration_0, arma::uvec cluster_labels, arma::uword num_clusters);
RcppExport SEXP _BayesicGibbs_dirichlet_posterior(SEXP concentration_0SEXP, SEXP cluster_labelsSEXP, SEXP num_clustersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type concentration_0(concentration_0SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type cluster_labels(cluster_labelsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type num_clusters(num_clustersSEXP);
    rcpp_result_gen = Rcpp::wrap(dirichlet_posterior(concentration_0, cluster_labels, num_clusters));
    return rcpp_result_gen;
END_RCPP
}
// cat_counter
arma::uvec cat_counter(arma::umat data);
RcppExport SEXP _BayesicGibbs_cat_counter(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(cat_counter(data));
    return rcpp_result_gen;
END_RCPP
}
// declare_class_probs_field
arma::field<arma::mat> declare_class_probs_field(arma::uvec cat_count, arma::uword num_cols, arma::uword num_clusters);
RcppExport SEXP _BayesicGibbs_declare_class_probs_field(SEXP cat_countSEXP, SEXP num_colsSEXP, SEXP num_clustersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type cat_count(cat_countSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type num_cols(num_colsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type num_clusters(num_clustersSEXP);
    rcpp_result_gen = Rcpp::wrap(declare_class_probs_field(cat_count, num_cols, num_clusters));
    return rcpp_result_gen;
END_RCPP
}
// sample_class_probabilities
arma::field<arma::mat> sample_class_probabilities(arma::umat data, arma::field<arma::mat> class_probabilities, arma::field<arma::vec> phi_prior, arma::uvec cluster_labels, arma::uvec cat_count, arma::uword num_clusters, arma::uword num_cols);
RcppExport SEXP _BayesicGibbs_sample_class_probabilities(SEXP dataSEXP, SEXP class_probabilitiesSEXP, SEXP phi_priorSEXP, SEXP cluster_labelsSEXP, SEXP cat_countSEXP, SEXP num_clustersSEXP, SEXP num_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type class_probabilities(class_probabilitiesSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type phi_prior(phi_priorSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type cluster_labels(cluster_labelsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type cat_count(cat_countSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type num_clusters(num_clustersSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type num_cols(num_colsSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_class_probabilities(data, class_probabilities, phi_prior, cluster_labels, cat_count, num_clusters, num_cols));
    return rcpp_result_gen;
END_RCPP
}
// categorical_cluster_probabilities
arma::vec categorical_cluster_probabilities(arma::urowvec point, arma::umat data, arma::field<arma::mat> class_probabilities, arma::vec cluster_weights, arma::uword num_clusters, arma::uword num_cols);
RcppExport SEXP _BayesicGibbs_categorical_cluster_probabilities(SEXP pointSEXP, SEXP dataSEXP, SEXP class_probabilitiesSEXP, SEXP cluster_weightsSEXP, SEXP num_clustersSEXP, SEXP num_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::urowvec >::type point(pointSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type class_probabilities(class_probabilitiesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cluster_weights(cluster_weightsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type num_clusters(num_clustersSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type num_cols(num_colsSEXP);
    rcpp_result_gen = Rcpp::wrap(categorical_cluster_probabilities(point, data, class_probabilities, cluster_weights, num_clusters, num_cols));
    return rcpp_result_gen;
END_RCPP
}
// cluster_predictor
arma::uword cluster_predictor(arma::vec probabilities);
RcppExport SEXP _BayesicGibbs_cluster_predictor(SEXP probabilitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type probabilities(probabilitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(cluster_predictor(probabilities));
    return rcpp_result_gen;
END_RCPP
}
// categorical_clustering
Rcpp::List categorical_clustering(arma::umat data, arma::field<arma::vec> phi_prior, arma::uvec cluster_labels, arma::uvec fix_vec, arma::vec cluster_weight_priors, arma::uword num_clusters, arma::uword num_iter, arma::uword burn, arma::uword thinning);
RcppExport SEXP _BayesicGibbs_categorical_clustering(SEXP dataSEXP, SEXP phi_priorSEXP, SEXP cluster_labelsSEXP, SEXP fix_vecSEXP, SEXP cluster_weight_priorsSEXP, SEXP num_clustersSEXP, SEXP num_iterSEXP, SEXP burnSEXP, SEXP thinningSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type phi_prior(phi_priorSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type cluster_labels(cluster_labelsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fix_vec(fix_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cluster_weight_priors(cluster_weight_priorsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type num_clusters(num_clustersSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thinning(thinningSEXP);
    rcpp_result_gen = Rcpp::wrap(categorical_clustering(data, phi_prior, cluster_labels, fix_vec, cluster_weight_priors, num_clusters, num_iter, burn, thinning));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_clustering
Rcpp::List gaussian_clustering(arma::uword num_iter, arma::vec concentration_0, arma::mat scale_0, arma::uvec class_labels, arma::uvec fix_vec, arma::vec mu_0, double lambda_0, arma::mat data, int df_0, arma::uword k, arma::uword burn, arma::uword thinning, bool outlier, double t_df, bool record_posteriors, bool normalise, double u, double v);
RcppExport SEXP _BayesicGibbs_gaussian_clustering(SEXP num_iterSEXP, SEXP concentration_0SEXP, SEXP scale_0SEXP, SEXP class_labelsSEXP, SEXP fix_vecSEXP, SEXP mu_0SEXP, SEXP lambda_0SEXP, SEXP dataSEXP, SEXP df_0SEXP, SEXP kSEXP, SEXP burnSEXP, SEXP thinningSEXP, SEXP outlierSEXP, SEXP t_dfSEXP, SEXP record_posteriorsSEXP, SEXP normaliseSEXP, SEXP uSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type concentration_0(concentration_0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type scale_0(scale_0SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type class_labels(class_labelsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fix_vec(fix_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_0(lambda_0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type df_0(df_0SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< bool >::type outlier(outlierSEXP);
    Rcpp::traits::input_parameter< double >::type t_df(t_dfSEXP);
    Rcpp::traits::input_parameter< bool >::type record_posteriors(record_posteriorsSEXP);
    Rcpp::traits::input_parameter< bool >::type normalise(normaliseSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_clustering(num_iter, concentration_0, scale_0, class_labels, fix_vec, mu_0, lambda_0, data, df_0, k, burn, thinning, outlier, t_df, record_posteriors, normalise, u, v));
    return rcpp_result_gen;
END_RCPP
}
// mdi_gauss_cat
Rcpp::List mdi_gauss_cat(arma::mat gaussian_data, arma::umat categorical_data, arma::vec mu_0, double lambda_0, arma::mat scale_0, int df_0, double a0, double b0, arma::vec cluster_weight_priors_gaussian, arma::vec cluster_weight_priors_categorical, arma::field<arma::vec> phi_prior, arma::uvec cluster_labels_gaussian, arma::uvec cluster_labels_categorical, arma::uword num_clusters_gaussian, arma::uword num_clusters_categorical, arma::uvec fix_vec_1, arma::uvec fix_vec_2, arma::uword num_iter, arma::uword burn, arma::uword thinning, bool outlier, double t_df, bool record_posteriors, bool normalise, double u_1, double v_1);
RcppExport SEXP _BayesicGibbs_mdi_gauss_cat(SEXP gaussian_dataSEXP, SEXP categorical_dataSEXP, SEXP mu_0SEXP, SEXP lambda_0SEXP, SEXP scale_0SEXP, SEXP df_0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP cluster_weight_priors_gaussianSEXP, SEXP cluster_weight_priors_categoricalSEXP, SEXP phi_priorSEXP, SEXP cluster_labels_gaussianSEXP, SEXP cluster_labels_categoricalSEXP, SEXP num_clusters_gaussianSEXP, SEXP num_clusters_categoricalSEXP, SEXP fix_vec_1SEXP, SEXP fix_vec_2SEXP, SEXP num_iterSEXP, SEXP burnSEXP, SEXP thinningSEXP, SEXP outlierSEXP, SEXP t_dfSEXP, SEXP record_posteriorsSEXP, SEXP normaliseSEXP, SEXP u_1SEXP, SEXP v_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type gaussian_data(gaussian_dataSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type categorical_data(categorical_dataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_0(lambda_0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type scale_0(scale_0SEXP);
    Rcpp::traits::input_parameter< int >::type df_0(df_0SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cluster_weight_priors_gaussian(cluster_weight_priors_gaussianSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cluster_weight_priors_categorical(cluster_weight_priors_categoricalSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type phi_prior(phi_priorSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type cluster_labels_gaussian(cluster_labels_gaussianSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type cluster_labels_categorical(cluster_labels_categoricalSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type num_clusters_gaussian(num_clusters_gaussianSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type num_clusters_categorical(num_clusters_categoricalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fix_vec_1(fix_vec_1SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fix_vec_2(fix_vec_2SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< bool >::type outlier(outlierSEXP);
    Rcpp::traits::input_parameter< double >::type t_df(t_dfSEXP);
    Rcpp::traits::input_parameter< bool >::type record_posteriors(record_posteriorsSEXP);
    Rcpp::traits::input_parameter< bool >::type normalise(normaliseSEXP);
    Rcpp::traits::input_parameter< double >::type u_1(u_1SEXP);
    Rcpp::traits::input_parameter< double >::type v_1(v_1SEXP);
    rcpp_result_gen = Rcpp::wrap(mdi_gauss_cat(gaussian_data, categorical_data, mu_0, lambda_0, scale_0, df_0, a0, b0, cluster_weight_priors_gaussian, cluster_weight_priors_categorical, phi_prior, cluster_labels_gaussian, cluster_labels_categorical, num_clusters_gaussian, num_clusters_categorical, fix_vec_1, fix_vec_2, num_iter, burn, thinning, outlier, t_df, record_posteriors, normalise, u_1, v_1));
    return rcpp_result_gen;
END_RCPP
}
// mdi_gauss_gauss
Rcpp::List mdi_gauss_gauss(arma::mat data_1, arma::mat data_2, arma::vec mu_0_1, double lambda_0_1, arma::mat scale_0_1, int df_0_1, arma::vec mu_0_2, double lambda_0_2, arma::mat scale_0_2, int df_0_2, arma::vec clust_weight_priors_1, arma::vec clust_weight_priors_2, arma::uvec clust_labels_1, arma::uvec clust_labels_2, arma::uword n_clust_1, arma::uword n_clust_2, arma::uvec fix_vec_1, arma::uvec fix_vec_2, double a0, double b0, arma::uword num_iter, arma::uword burn, arma::uword thinning, bool outlier_1, double t_df_1, bool outlier_2, double t_df_2, bool record_posteriors, bool normalise_1, bool normalise_2, double u_1, double v_1, double u_2, double v_2);
RcppExport SEXP _BayesicGibbs_mdi_gauss_gauss(SEXP data_1SEXP, SEXP data_2SEXP, SEXP mu_0_1SEXP, SEXP lambda_0_1SEXP, SEXP scale_0_1SEXP, SEXP df_0_1SEXP, SEXP mu_0_2SEXP, SEXP lambda_0_2SEXP, SEXP scale_0_2SEXP, SEXP df_0_2SEXP, SEXP clust_weight_priors_1SEXP, SEXP clust_weight_priors_2SEXP, SEXP clust_labels_1SEXP, SEXP clust_labels_2SEXP, SEXP n_clust_1SEXP, SEXP n_clust_2SEXP, SEXP fix_vec_1SEXP, SEXP fix_vec_2SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP num_iterSEXP, SEXP burnSEXP, SEXP thinningSEXP, SEXP outlier_1SEXP, SEXP t_df_1SEXP, SEXP outlier_2SEXP, SEXP t_df_2SEXP, SEXP record_posteriorsSEXP, SEXP normalise_1SEXP, SEXP normalise_2SEXP, SEXP u_1SEXP, SEXP v_1SEXP, SEXP u_2SEXP, SEXP v_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data_1(data_1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type data_2(data_2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_0_1(mu_0_1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_0_1(lambda_0_1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type scale_0_1(scale_0_1SEXP);
    Rcpp::traits::input_parameter< int >::type df_0_1(df_0_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_0_2(mu_0_2SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_0_2(lambda_0_2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type scale_0_2(scale_0_2SEXP);
    Rcpp::traits::input_parameter< int >::type df_0_2(df_0_2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type clust_weight_priors_1(clust_weight_priors_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type clust_weight_priors_2(clust_weight_priors_2SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type clust_labels_1(clust_labels_1SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type clust_labels_2(clust_labels_2SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_clust_1(n_clust_1SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_clust_2(n_clust_2SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fix_vec_1(fix_vec_1SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fix_vec_2(fix_vec_2SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< bool >::type outlier_1(outlier_1SEXP);
    Rcpp::traits::input_parameter< double >::type t_df_1(t_df_1SEXP);
    Rcpp::traits::input_parameter< bool >::type outlier_2(outlier_2SEXP);
    Rcpp::traits::input_parameter< double >::type t_df_2(t_df_2SEXP);
    Rcpp::traits::input_parameter< bool >::type record_posteriors(record_posteriorsSEXP);
    Rcpp::traits::input_parameter< bool >::type normalise_1(normalise_1SEXP);
    Rcpp::traits::input_parameter< bool >::type normalise_2(normalise_2SEXP);
    Rcpp::traits::input_parameter< double >::type u_1(u_1SEXP);
    Rcpp::traits::input_parameter< double >::type v_1(v_1SEXP);
    Rcpp::traits::input_parameter< double >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< double >::type v_2(v_2SEXP);
    rcpp_result_gen = Rcpp::wrap(mdi_gauss_gauss(data_1, data_2, mu_0_1, lambda_0_1, scale_0_1, df_0_1, mu_0_2, lambda_0_2, scale_0_2, df_0_2, clust_weight_priors_1, clust_weight_priors_2, clust_labels_1, clust_labels_2, n_clust_1, n_clust_2, fix_vec_1, fix_vec_2, a0, b0, num_iter, burn, thinning, outlier_1, t_df_1, outlier_2, t_df_2, record_posteriors, normalise_1, normalise_2, u_1, v_1, u_2, v_2));
    return rcpp_result_gen;
END_RCPP
}
// mdi_cat_cat
Rcpp::List mdi_cat_cat(arma::umat data_1, arma::umat data_2, arma::field<arma::vec> class_dist_prior_1, arma::field<arma::vec> class_dist_prior_2, arma::vec clust_weight_priors_1, arma::vec clust_weight_priors_2, arma::uvec clust_labels_1, arma::uvec clust_labels_2, arma::uword n_clust_1, arma::uword n_clust_2, arma::uvec fix_vec_1, arma::uvec fix_vec_2, double a0, double b0, arma::uword num_iter, arma::uword burn, arma::uword thinning);
RcppExport SEXP _BayesicGibbs_mdi_cat_cat(SEXP data_1SEXP, SEXP data_2SEXP, SEXP class_dist_prior_1SEXP, SEXP class_dist_prior_2SEXP, SEXP clust_weight_priors_1SEXP, SEXP clust_weight_priors_2SEXP, SEXP clust_labels_1SEXP, SEXP clust_labels_2SEXP, SEXP n_clust_1SEXP, SEXP n_clust_2SEXP, SEXP fix_vec_1SEXP, SEXP fix_vec_2SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP num_iterSEXP, SEXP burnSEXP, SEXP thinningSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type data_1(data_1SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type data_2(data_2SEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type class_dist_prior_1(class_dist_prior_1SEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type class_dist_prior_2(class_dist_prior_2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type clust_weight_priors_1(clust_weight_priors_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type clust_weight_priors_2(clust_weight_priors_2SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type clust_labels_1(clust_labels_1SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type clust_labels_2(clust_labels_2SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_clust_1(n_clust_1SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n_clust_2(n_clust_2SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fix_vec_1(fix_vec_1SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fix_vec_2(fix_vec_2SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thinning(thinningSEXP);
    rcpp_result_gen = Rcpp::wrap(mdi_cat_cat(data_1, data_2, class_dist_prior_1, class_dist_prior_2, clust_weight_priors_1, clust_weight_priors_2, clust_labels_1, clust_labels_2, n_clust_1, n_clust_2, fix_vec_1, fix_vec_2, a0, b0, num_iter, burn, thinning));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _BayesicGibbs_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _BayesicGibbs_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _BayesicGibbs_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _BayesicGibbs_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesicGibbs_similarity_mat", (DL_FUNC) &_BayesicGibbs_similarity_mat, 1},
    {"_BayesicGibbs_entropy", (DL_FUNC) &_BayesicGibbs_entropy, 1},
    {"_BayesicGibbs_dirichlet_posterior", (DL_FUNC) &_BayesicGibbs_dirichlet_posterior, 3},
    {"_BayesicGibbs_cat_counter", (DL_FUNC) &_BayesicGibbs_cat_counter, 1},
    {"_BayesicGibbs_declare_class_probs_field", (DL_FUNC) &_BayesicGibbs_declare_class_probs_field, 3},
    {"_BayesicGibbs_sample_class_probabilities", (DL_FUNC) &_BayesicGibbs_sample_class_probabilities, 7},
    {"_BayesicGibbs_categorical_cluster_probabilities", (DL_FUNC) &_BayesicGibbs_categorical_cluster_probabilities, 6},
    {"_BayesicGibbs_cluster_predictor", (DL_FUNC) &_BayesicGibbs_cluster_predictor, 1},
    {"_BayesicGibbs_categorical_clustering", (DL_FUNC) &_BayesicGibbs_categorical_clustering, 9},
    {"_BayesicGibbs_gaussian_clustering", (DL_FUNC) &_BayesicGibbs_gaussian_clustering, 18},
    {"_BayesicGibbs_mdi_gauss_cat", (DL_FUNC) &_BayesicGibbs_mdi_gauss_cat, 26},
    {"_BayesicGibbs_mdi_gauss_gauss", (DL_FUNC) &_BayesicGibbs_mdi_gauss_gauss, 34},
    {"_BayesicGibbs_mdi_cat_cat", (DL_FUNC) &_BayesicGibbs_mdi_cat_cat, 17},
    {"_BayesicGibbs_rcpparma_hello_world", (DL_FUNC) &_BayesicGibbs_rcpparma_hello_world, 0},
    {"_BayesicGibbs_rcpparma_outerproduct", (DL_FUNC) &_BayesicGibbs_rcpparma_outerproduct, 1},
    {"_BayesicGibbs_rcpparma_innerproduct", (DL_FUNC) &_BayesicGibbs_rcpparma_innerproduct, 1},
    {"_BayesicGibbs_rcpparma_bothproducts", (DL_FUNC) &_BayesicGibbs_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesicGibbs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
